#!/bin/bash

# How many lines in sstatus output?
# Honor user environment setting if one exists
if [ -z ${Q_LINES+x} ] ; then
   Q_LINES=30
fi

# We only need to use sudo when we are not root
if [ $UID -ne 0 ] ; then
	SUDO=sudo
else
	SUDO=""
fi

set -u # Do not let us use undeclared variables

# Handle commands that do not require any arguments
case $(basename $0) in

   quicksystemctl)
      echo -e "\nThe $(basename $0) script is not intended to be used directly\n"
      exit 1
      ;;

   sdaemonreload)
      echo -e "\n$SUDO systemctl daemon-reload\n"
      $SUDO systemctl daemon-reload
      exit 0
      ;;

	sfailed)
		systemctl --type=service --state=failed --no-pager --no-legend
		exit 0
		;;

   slist)
      if [ $# -ge 1 ] ; then
         echo -e "\nsystemctl list-unit-files --type service --no-pager | grep $@\n"
         systemctl list-unit-files --type service --no-pager | grep $@
      else
         echo -e "\nsystemctl list-unit-files --type service --no-pager\n"
         systemctl list-unit-files --type service --no-pager
      fi
      exit 0
      ;;

	srunning)
		systemctl --type=service --state=running --no-pager --no-legend
		exit 0
		;;

esac

# Commands that require arguments
if   [ $# -lt 1 ] ; then
   echo -e "\nI need the name of a service\n"
   echo -e "(e.g. $(basename $0) nginx)\n"
   exit 1
fi

Q_SERVICE=$1

sstop()
{
   $SUDO systemctl stop $Q_SERVICE
}

sstart()
{
   $SUDO systemctl start $Q_SERVICE
}

sstatus()
{
   systemctl --lines $Q_LINES --no-pager status $Q_SERVICE
}

# What are we doing?
case $(basename $0) in

	sactive)
		systemctl is-active $Q_SERVICE
		;;

   sstart)
      sstart
      sstatus
      ;;

   sstop)
      sstop
      sstatus
      ;;

   srestart)
      echo -e "\nStopping $Q_SERVICE\n"
      sstop
      sstatus

      echo -e "\nStarting $Q_SERVICE\n"
      sstart
      sstatus
      ;;

   sreload)
      $SUDO systemctl reload $Q_SERVICE
      sstatus
      ;;

   sstatus)
      sstatus
      ;;

   senable)
      $SUDO systemctl enable $Q_SERVICE
      ;;

   sdisable)
      $SUDO systemctl disable $Q_SERVICE
      ;;

   *)
      echo -e "\nUnknown option $(basename $0)\n"
      exit 1
      ;;

esac


